name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["Tests"]
    types:
      - completed

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.ref == 'refs/heads/main' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 25
      uses: actions/setup-java@v4
      with:
        java-version: 25
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Make mvnw executable
      run: chmod +x mvnw
      
    - name: Build application
      run: ./mvnw clean package --batch-mode -DskipTests
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: voting-system-jar
        path: target/*.jar
        retention-days: 30

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: voting-system-jar
        path: target/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/voting-system
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 25
      uses: actions/setup-java@v4
      with:
        java-version: 25
        distribution: 'temurin'
        
    - name: Run OWASP dependency check
      run: |
        ./mvnw org.owasp:dependency-check-maven:check --batch-mode
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: target/dependency-check-report.html
        
    - name: Comment PR with security scan results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'target/dependency-check-report.html';
          
          if (fs.existsSync(path)) {
            const report = fs.readFileSync(path, 'utf8');
            const vulnerabilities = report.match(/<span class="vuln-count">(\d+)<\/span>/g);
            
            if (vulnerabilities && vulnerabilities.length > 0) {
              const vulnCount = vulnerabilities[0].match(/\d+/)[0];
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `ðŸ”’ **Security Scan Results**\n\nFound ${vulnCount} potential vulnerabilities. Please review the security scan report.`
              });
            }
          }
